name: "Build & Release"

on:
  push:
    branches:
      - main

#  pull_request:
#    branches:
#      - development

env:
  PROPERTIES_PATH: ./android/key.properties

jobs:
  build_and_release:
    name: build & release
    runs-on: macos-latest

    permissions:
      contents: write

    steps:
  # step 1 - checkout repo
      - name: Checkout
        uses: actions/checkout@v4.1.6

  # step 2 - setup Java
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'

  # step 3 - setup Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          # optional parameters follow
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
      - run: flutter --version

  # step 4 - install dependencies (Android)
      - name: Install dependencies (android)
        run: flutter pub get

  # step 5 - install dependencies (iOS)
      - name: Install dependencies (iOS)
        run: |
          cd ios
          pod install

  # step 6 - Test Flutter App
      - name: Flutter App Unit Testing
        run: flutter test

  # step 7 - Analyze Flutter App
      - name: App Issues Analyzing
        run: flutter analyze

  # step 8 - Download android keystore
      - name: Download android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'keystore.jks'
          encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

  # step 9 - Configure KeyProperties
      - name: Configure .jks KeyProperties
        run: |
          echo keyPassword=${{ secrets.KEY_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo storePassword=${{ secrets.KEYSTORE_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo keyAlias=${{ secrets.KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
          echo storeFile=${{ steps.android_keystore.outputs.filePath }} >> ${{env.PROPERTIES_PATH}}

  # step 10 - Build APK file
      - name: Build APK
        run: flutter build apk --split-per-abi --release

  # step 11 - Build AAB file
      - name: Build AppBundle
        run: flutter build appbundle --split-debug-info --release

  # step 12 - Build IPA file
      - name: Build IPA
        run: flutter build ipa --release --no-codesign
      - name: Compress Archives and IPAs
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

  # step 13 - Upload Artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.1.0
        with:
          name: Releases (APK,AAB,IPA)
          path: |
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz

  # step 14 - Retrieve the Current App Version from pubspec.yaml file
      - name: Get App version Number
        id: get_version
        run: echo "VERSION=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
#          run: echo "::set-output name=VERSION::$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2)"
#          run: |
#            echo ::set-output name=VERSION::$(grep "version:" pubspec.yaml | awk '{print $2}')

  # step 15 - Create Release with adding app version number to the release repository
      - name: Create Releases with new Release Number
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk,build/app/outputs/bundle/release/app-release.aab,build/ios_build.tar.gz"
          tag: v${{ steps.get_version.outputs.VERSION }}
          name: v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          bodyFile: "README.md"

  # step 16 - Upload Artifact to the google Drive
      - name: Upload Github Artifacts TO Google Drive
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.2.2
        with:
          target: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          credentials: ${{ secrets.SERVICE_ACCOUNT_CREDENTIALS }}
          parent_folder_id: 1XSqWujNJhRqfKBSgh6IfhzuU_1lohshr
          child_folder: v${{ steps.get_version.outputs.VERSION }}

  # step 17 - Send mail to the QA Team
      - name: Send E-Mail to QA team with release note
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_APP_USERNAME }}
          password: ${{ secrets.MAIL_APP_PASSWORD }}
          subject: Release for the QA Testing
          to: ${{ vars.TO_MAIL }}
          cc: ${{ vars.CC_MAILS }}
          from: ${{ vars.FROM_NAME }}
          html_body: file://README.md
          convert_markdown: true # Writing format show in mail same as.

# Test@1234 - keystore data